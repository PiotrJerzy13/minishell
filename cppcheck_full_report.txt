Checking builtin.c ...
minishell.h:13:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
minishell.h:14:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
minishell.h:15:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
minishell.h:16:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
minishell.h:17:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
minishell.h:18:0: information: Include file: <sys/wait.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/wait.h>
^
minishell.h:19:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
minishell.h:20:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
1/10 files checked 6% done
Checking commands.c ...
commands.c:51:13: style: The scope of the variable 'tmp' can be reduced. [variableScope]
 t_command *tmp;
            ^
commands.c:75:13: style: The scope of the variable 'new_command' can be reduced. [variableScope]
 t_command *new_command;
            ^
commands.c:94:16: style: The scope of the variable 'builtin' can be reduced. [variableScope]
 t_builtin_ptr builtin;
               ^
commands.c:76:9: style: Variable 'token' can be declared as pointer to const [constVariablePointer]
 char  *token;
        ^
2/10 files checked 19% done
Checking copy_enviroment.c ...
copy_enviroment.c:103:8: style: The scope of the variable 'key' can be reduced. [variableScope]
 char *key;
       ^
copy_enviroment.c:104:8: style: The scope of the variable 'value' can be reduced. [variableScope]
 char *value;
       ^
copy_enviroment.c:99:52: style: inconclusive: Function 'copy_environment_to_struct' argument 2 names different: declaration 'env_struct' definition 'environment'. [funcArgNamesDifferent]
void copy_environment_to_struct(char **env, t_env *environment,
                                                   ^
minishell.h:110:54: note: Function 'copy_environment_to_struct' argument 2 names different: declaration 'env_struct' definition 'environment'.
void   copy_environment_to_struct(char **env, t_env *env_struct,
                                                     ^
copy_enviroment.c:99:52: note: Function 'copy_environment_to_struct' argument 2 names different: declaration 'env_struct' definition 'environment'.
void copy_environment_to_struct(char **env, t_env *environment,
                                                   ^
copy_enviroment.c:15:28: style: Parameter 'source_env' can be declared as pointer to const [constParameterPointer]
t_env deep_copy_env(t_env *source_env, t_memories *memories)
                           ^
copy_enviroment.c:103:8: style: Variable 'key' can be declared as pointer to const [constVariablePointer]
 char *key;
       ^
copy_enviroment.c:104:8: style: Variable 'value' can be declared as pointer to const [constVariablePointer]
 char *value;
       ^
copy_enviroment.c:38:10: error: Uninitialized variable: new_env.memories [uninitvar]
 return (new_env);
         ^
copy_enviroment.c:24:6: note: Assuming condition is false
 if (!new_env.pairs)
     ^
copy_enviroment.c:38:10: note: Uninitialized variable: new_env.memories
 return (new_env);
         ^
copy_enviroment.c:48:10: error: Uninitialized variable: new_env.memories [uninitvar]
 return (new_env);
         ^
3/10 files checked 33% done
Checking enviroment.c ...
4/10 files checked 44% done
Checking enviroment2.c ...
enviroment2.c:29:28: style: inconclusive: Function 'export_env_var' argument 1 names different: declaration 'env' definition 'environment'. [funcArgNamesDifferent]
void export_env_var(t_env *environment, char *input, t_memories *memories)
                           ^
minishell.h:117:30: note: Function 'export_env_var' argument 1 names different: declaration 'env' definition 'environment'.
void   export_env_var(t_env *env, char *input, t_memories *memories);
                             ^
enviroment2.c:29:28: note: Function 'export_env_var' argument 1 names different: declaration 'env' definition 'environment'.
void export_env_var(t_env *environment, char *input, t_memories *memories)
                           ^
enviroment2.c:31:8: style: Variable 'key' can be declared as pointer to const [constVariablePointer]
 char *key;
       ^
enviroment2.c:32:8: style: Variable 'value' can be declared as pointer to const [constVariablePointer]
 char *value;
       ^
enviroment2.c:46:23: style: Parameter 'env' can be declared as pointer to const [constParameterPointer]
void print_env(t_env *env)
                      ^
5/10 files checked 50% done
Checking main.c ...
main.c:19:9: style: The scope of the variable 'input' can be reduced. [variableScope]
 char  *input;
        ^
6/10 files checked 59% done
Checking memories.c ...
7/10 files checked 67% done
Checking struck_pair.c ...
struck_pair.c:15:52: style: Parameter 'key' can be declared as pointer to const [constParameterPointer]
void add_key_value(t_key_value_store *store, char *key,
                                                   ^
struck_pair.c:16:8: style: Parameter 'value' can be declared as pointer to const [constParameterPointer]
 char *value, t_memories *memories)
       ^
struck_pair.c:71:47: style: Parameter 'store' can be declared as pointer to const [constParameterPointer]
void print_key_value_store(t_key_value_store *store)
                                              ^
8/10 files checked 78% done
Checking token.c ...
token.c:31:26: style: inconclusive: Function 'add_token' argument 1 names different: declaration 'token_list' definition 'head'. [funcArgNamesDifferent]
void add_token(t_token **head, t_token *new_token)
                         ^
minishell.h:105:28: note: Function 'add_token' argument 1 names different: declaration 'token_list' definition 'head'.
void   add_token(t_token **token_list, t_token *new_token);
                           ^
token.c:31:26: note: Function 'add_token' argument 1 names different: declaration 'token_list' definition 'head'.
void add_token(t_token **head, t_token *new_token)
                         ^
token.c:15:27: style: Parameter 'value' can be declared as pointer to const [constParameterPointer]
t_token *init_token(char *value, t_token_type type)
                          ^
9/10 files checked 92% done
Checking token_helper.c ...
10/10 files checked 100% done
copy_enviroment.c:41:0: style: The function 'shallow_copy_env' is never used. [unusedFunction]
t_env shallow_copy_env(t_env *source_env)
^
enviroment.c:15:0: style: The function 'allocate_environment' is never used. [unusedFunction]
int allocate_environment(t_env *environment, int size, t_memories *memories)
^
enviroment.c:65:0: style: The function 'unset_env_var' is never used. [unusedFunction]
void unset_env_var(t_env *env, const char *key)
^
struck_pair.c:37:0: style: The function 'parse_input_to_key_value' is never used. [unusedFunction]
void parse_input_to_key_value(t_key_value_store *store, t_memories *memories)
^
struck_pair.c:56:0: style: The function 'init_key_value_store' is never used. [unusedFunction]
void init_key_value_store(t_key_value_store *store,
^
struck_pair.c:71:0: style: The function 'print_key_value_store' is never used. [unusedFunction]
void print_key_value_store(t_key_value_store *store)
^
token.c:50:0: style: The function 'get_quoted_token' is never used. [unusedFunction]
char *get_quoted_token(char **input_ptr)
^
nofile:0:0: information: Active checkers: 115/835 (use --checkers-report=<filename> to see details) [checkersReport]

